void merge(SpVM* input_spvm,size_t start,size_t mid,size_t end){

	uint32_t left = mid-start+1;
	uint32_t right = end-mid;
	
	uint32_t row_left[left];
	uint32_t col_left[left];
	float value_left[left];

	uint32_t row_right[right];
	uint32_t col_right[right];
	float value_right[right];


	for(size_t i=0; i<left; i++){
		row_left[i] = input_spvm->row[i+left];
		col_left[i] = input_spvm->col[i+left];
		value_left[i] = input_spvm->value[i+left];
	}


	for(size_t i=0; i<right; i++){
		row_right[i] = input_spvm->row[i+mid+1];
		col_right[i] = input_spvm->col[i+mid+1];
		value_right[i] = input_spvm->value[i+mid+1];
	}
	

	size_t left_elem=0;
	size_t right_elem=0;
	size_t pos = left;

	while(left_elem < left && right_elem < right){
		uint8_t condition = (row_left[left_elem] < row_right[right_elem]) ||
												(row_left[left_elem] == row_right[right_elem] && 
												 col_left[left_elem] < col_right[right_elem]);
		if(condition){
			input_spvm->row[pos] = row_left[left_elem]; 
			input_spvm->col[pos] = col_left[left_elem]; 
			input_spvm->value[pos] = value_left[left_elem]; 

			left_elem++;
		}else{
			input_spvm->row[pos] = row_right[right_elem]; 
			input_spvm->col[pos] = col_right[right_elem]; 
			input_spvm->value[pos] = value_right[right_elem]; 

			right_elem++;
		}

		pos++;
	}


	while (left_elem < left) {
		input_spvm->row[pos] = row_left[left_elem]; 
		input_spvm->col[pos] = col_left[left_elem]; 
		input_spvm->value[pos] = value_left[left_elem]; 

		left_elem++;
		pos++;
  }
    
	// Copy remaining elements of arr2[] if any
	while (right_elem < right) {
		input_spvm->row[pos] = row_right[right_elem]; 
		input_spvm->col[pos] = col_right[right_elem]; 
		input_spvm->value[pos] = value_right[right_elem]; 

		right_elem++;
		pos++;
	}

}
